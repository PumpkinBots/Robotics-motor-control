import java.text.SimpleDateFormat;

plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "com.palantir.git-version" version "0.13.0"
}

// Use the com.palntir.git-version plugin to get the project version.
version gitVersion()

def robotVersionFileInput = file("src/generate/RobotVersion.cpp.in")
def robotVersionFileOutput = file("$buildDir/generated/cpp/RobotVersion.cpp")
def generatedOutputDir = file("$buildDir/generated/cpp")

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'") // you can change it
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

task generateCppVersion() {
    description = 'Generates the robot version class'
    def details = versionDetails()
    def dirty = ''
    def buildTime = buildTime()
    def hostname = InetAddress.getLocalHost().getCanonicalHostName()
    // Use GString with a closure to capture the dirty status.
    def verStr = "${details.lastTag} on ${details.branchName} at ${details.gitHash}${-> dirty}"
    def buildStr = "Built on ${buildTime} by ${hostname}:${projectDir}"

    if (!details.isCleanTag) {
        dirty = '.dirty'
    }

    doLast {
        println "Writing version ${verStr} to $robotVersionFileOutput"
        println "version: ${version}"
        println "lastTag: ${details.lastTag}"
        println "commitDistance: ${details.commitDistance}"
        println "gitHash: ${details.gitHash}"
        println "gitHashFull: ${details.gitHashFull}"
        println "branchName: ${details.branchName}"
        println "isCleanTag: ${details.isCleanTag}"
        println "projectDir: ${projectDir}"
        println "build time: ${buildTime}"
        println "hostname: ${hostname}"

        // Make sure the output directory exists or the task fails.
        generatedOutputDir.mkdirs()

        if (robotVersionFileOutput.exists()) {
            robotVersionFileOutput.delete()
        }
        def read = robotVersionFileInput.text.replace('${robot_version}', verStr).replace('${build_info}', buildStr).replace('\\', '\\\\')
        robotVersionFileOutput.write(read)
    }
}


// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDirs = [
                        'src/main/cpp',
                        "$buildDir/generated/cpp"
                    ]
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
    binaries {
        all {
            tasks.withType(CppCompile) {
                dependsOn generateCppVersion
            }
        }
    }
}

// Generate Build information as described in https://docs.wpilib.org/en/stable/docs/software/advanced-gradlerio/deploy-git-data.html

tasks.register("writeBranchName") {
   // Define an output stream to write to instead of terminal
   def stdout = new ByteArrayOutputStream()

   // Execute the git command
   exec {
      commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
      // Write to the output stream instead of terminal
      standardOutput = stdout
   }

   // Parse the output into a string
   def branch = stdout.toString().trim()

   // Create a new file
   new File(
      // Join project directory and deploy directory
      projectDir.toString() + "/src/main/deploy",
      // File name to write to
      "branch.txt"
   ).text = branch // Set the contents of the file to the variable branch
}
deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeBranchName)

tasks.register("writeCommitHash") {
   def stdout = new ByteArrayOutputStream()

   exec {
     commandLine "git", "rev-parse", "--short", "HEAD"
     standardOutput = stdout
   }

   def commitHash = stdout.toString().trim()

   new File(
      projectDir.toString() + "/src/main/deploy",
      "commit.txt"
   ).text = commitHash
}

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeCommitHash)
